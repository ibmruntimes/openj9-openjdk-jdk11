# ===========================================================================
# (c) Copyright IBM Corp. 2017, 2020 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

CLEAN_DIRS += vm

.PHONY : \
	j9vm-build \
	openj9-create-main-targets-include \
	openssl-build \
	test-image-openj9 \
	#

JVM_MAIN_LIB_TARGETS := j9vm-build
JVM_MAIN_TARGETS := j9vm-build
JVM_TOOLS_TARGETS :=
JVM_DOCS_TARGETS :=
JVM_TEST_IMAGE_TARGETS :=
DEFAULT_JMOD_DEPS := j9vm-build
PHASE_MAKEDIRS := $(TOPDIR)/closed/make $(PHASE_MAKEDIRS)

OPENJ9_MAKE := $(MAKE) -f $(TOPDIR)/closed/OpenJ9.gmk SPEC=$(SPEC)
OPENSSL_MAKE := $(MAKE) -f $(TOPDIR)/closed/openssl.gmk SPEC=$(SPEC)

# An early part of the build process involves computing the list of main targets.
# Those targets include {module}-java, {module}-jmod, etc. which requires that the
# set of module names be known. We must build and run the preprocessor to ensure the
# modules specific to OpenJ9 will be found and included in that set. The next two
# rules make that happen.

create-main-targets-include : openj9-create-main-targets-include

openj9-create-main-targets-include :
	+$(OPENJ9_MAKE) build-openj9-tools
	+$(OPENJ9_MAKE) generate-j9jcl-sources

openssl-build : buildtools-langtools
	+$(OPENSSL_MAKE)

j9vm-build : openssl-build
	+$(OPENJ9_MAKE) build-j9

# Modules with content created by j9vm-build:
OPENJ9_VM_MODULES := \
	java.base \
	jdk.management \
	openj9.cuda \
	openj9.dtfj \
	openj9.sharedclasses \
	openj9.traceformat \
	#

$(addsuffix -copy, $(OPENJ9_VM_MODULES)) : j9vm-build

java.base-libs : java.base-copy

test-image : test-image-openj9

# If not cross-compiling, capture 'java -version' output.
test-image-openj9 : exploded-image
	+$(OPENJ9_MAKE) openj9_test_image
ifneq ($(COMPILE_TYPE), cross)
	$(JDK_OUTPUTDIR)/bin/java -version 2>&1 | $(TEE) $(TEST_IMAGE_DIR)/openj9/java-version.txt
endif

ALL_TARGETS += test-image-openj9

ifeq (true,$(OPENJ9_ENABLE_DDR))

.PHONY : openj9.dtfj-ddr-gen openj9.dtfj-ddr-jar

openj9.dtfj-ddr-gen : j9vm-build $(addsuffix -java, java.base java.desktop openj9.dtfj openj9.traceformat)
	+$(MAKE) -f $(TOPDIR)/closed/DDR.gmk SPEC=$(SPEC) generate

openj9.dtfj-ddr-jar : openj9.dtfj-ddr-gen
	+$(MAKE) -f $(TOPDIR)/closed/DDR.gmk SPEC=$(SPEC) build_jar

openj9.dtfj-launchers : openj9.dtfj-ddr-jar

endif # OPENJ9_ENABLE_DDR
