# ===========================================================================
# (c) Copyright IBM Corp. 2017, 2019 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

TARGETS += \
	$(INCLUDE_TARGET_DIR)/jvmti.h \
	$(INCLUDE_TARGET_DIR)/ibmjvmti.h \
	#

$(INCLUDE_TARGET_DIR)/jvmti.h : $(OPENJ9_VM_BUILD_DIR)/include/jvmti.h
	$(call install-file)

$(INCLUDE_TARGET_DIR)/ibmjvmti.h : $(TOPDIR)/openj9/runtime/include/ibmjvmti.h
	$(call install-file)

##########################################################################################
# Optionally copy OpenSSL Crypto Lbrary
# To bundle first search for openssl 1.1.x library, if not found, search for 1.0.x
ifneq ($(OPENSSL_BUNDLE_LIB_PATH), )
  ifeq ($(OPENJDK_TARGET_OS), linux)
    OPENSSL_LIB_NAME = libcrypto.so.1.1
    ifeq ("$(wildcard $(OPENSSL_BUNDLE_LIB_PATH)/$(OPENSSL_LIB_NAME))", "")
      OPENSSL_LIB_NAME = libcrypto.so.1.0.0
    endif
  else ifeq ($(OPENJDK_TARGET_OS), macosx)
    OPENSSL_LIB_NAME = libcrypto.1.1.dylib
    ifeq ("$(wildcard $(OPENSSL_BUNDLE_LIB_PATH)/$(OPENSSL_LIB_NAME))", "")
      OPENSSL_LIB_NAME = libcrypto.1.0.0.dylib
    endif
  else ifeq ($(OPENJDK_TARGET_OS), windows)
    ifeq ($(OPENJDK_TARGET_CPU_BITS), 64)
      OPENSSL_LIB_NAME = libcrypto-1_1-x64.dll
    else
      OPENSSL_LIB_NAME = libcrypto-1_1.dll
    endif
    ifeq ("$(wildcard $(OPENSSL_BUNDLE_LIB_PATH)/$(OPENSSL_LIB_NAME))", "")
      OPENSSL_LIB_NAME = libeay32.dll
    endif
  else ifeq ($(OPENJDK_TARGET_OS), aix)
    # OpenSSL 1.1.1 on AIX has switched to use archive library files (natural way)
    # instead of 'libcrypto.so' files.
    # For reference, corresponding OpenSSL PR is
    #     https://github.com/openssl/openssl/pull/6487
    # For OpenSSL v1.0.0, bundle libcrypto.so.1.0.0 library with JDK
    OPENSSL_LIB_NAME = libcrypto.so.1.0.0
    ifeq ("$(wildcard $(OPENSSL_BUNDLE_LIB_PATH)/$(OPENSSL_LIB_NAME))", "")
      # For OpenSSL v1.1.0, bundle libcrypto.so.1.1 library with JDK
      OPENSSL_LIB_NAME = libcrypto.so.1.1
      ifeq ("$(wildcard $(OPENSSL_BUNDLE_LIB_PATH)/$(OPENSSL_LIB_NAME))", "")
        # For OpenSSL v1.1.1, bundle libcrypto.a library with JDK
        OPENSSL_LIB_NAME = libcrypto.a
      endif
    endif
  else
    OPENSSL_LIB_NAME = libcrypto.so
  endif

  # On Mac OS, update the crypto library path to @rpath as the default is /usr/local/lib/
  ifeq ($(OPENJDK_BUILD_OS), macosx)
    .PHONY : RPATH_CRYPTO_LIB
    TARGETS += RPATH_CRYPTO_LIB
    RPATH_CRYPTO_LIB :
	install_name_tool -id "@rpath/$(OPENSSL_LIB_NAME)" "$(OPENSSL_BUNDLE_LIB_PATH)/$(OPENSSL_LIB_NAME)"
  endif

  OPENSSL_TARGET_LIB = $(LIB_DST_DIR)/$(OPENSSL_LIB_NAME)
  TARGETS += $(OPENSSL_TARGET_LIB)
  $(OPENSSL_TARGET_LIB) : $(OPENSSL_BUNDLE_LIB_PATH)/$(OPENSSL_LIB_NAME)
	@$(MKDIR) -p $(@D)
	$(CP) $< $@
  ifeq ($(OPENJDK_BUILD_OS), windows)
	$(CHMOD) a+rx $@
  endif
endif
################################################################################
