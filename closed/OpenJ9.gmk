# ===========================================================================
# (c) Copyright IBM Corp. 2017, 2023 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

default :
	$(error OpenJ9.gmk has no default target)

# spec.gmk is generated by configure and contains many of the variable definitions used in this makefile
ifeq (,$(wildcard $(SPEC)))
  $(error OpenJ9.gmk needs SPEC set to a proper spec.gmk)
endif
include $(SPEC)
include $(TOPDIR)/make/common/MakeBase.gmk
include $(TOPDIR)/closed/JPP.gmk

ifeq (,$(BUILD_ID))
  BUILD_ID := 000000
endif

# Auxiliary variables for communication between GetVersion and ShowVersions.
VersionLabelWidth := 1
VersionPairs :=

# GetVersion
# ----------
# $1 - repository display name
# $2 - variable name
# $3 - root directory of git repository
# $4 - 'required' for a required repository, anything else for an optional one
GetVersion = $(eval $(call GetVersionHelper,$(strip $1),$(strip $2),$(strip $3),$(strip $4)))
define GetVersionHelper
  $2 := $$(if $(wildcard $3),$$(shell $(GIT) -C $3 rev-parse --short HEAD))
  ifneq (,$$($2))
    VersionLabelWidth := $(shell $(ECHO) "$1" | $(AWK) "{ width = length; print (width > $(VersionLabelWidth) ? width : $(VersionLabelWidth)) }")
    VersionPairs += "$1" "$$($2)"
  else ifeq ($4,required)
    $$(error Could not determine $2 for $3)
  endif
endef # GetVersionHelper

# ShowVersions
# ---------
define ShowVersions
	@$(PRINTF) "  Source version info:\n"
	@$(PRINTF) "    %-$(VersionLabelWidth)s - %s\n" $(VersionPairs)
endef # ShowVersions

$(call GetVersion, openjdk,  OPENJDK_SHA,   $(TOPDIR),           required)
$(call GetVersion, openj9,   OPENJ9_SHA,    $(OPENJ9_TOPDIR),    required)
$(call GetVersion, omr,      OPENJ9OMR_SHA, $(OPENJ9OMR_TOPDIR), required)
$(call GetVersion, openssl,  OPENSSL_SHA,   $(OPENSSL_DIR))

# Find OpenJ9 tag associated with current commit (suppressing stderr in case there is no such tag).
OPENJ9_TAG := $(shell $(GIT) -C $(OPENJ9_TOPDIR) describe --exact-match HEAD 2>/dev/null)
ifneq (,$(OPENJ9_TAG))
  OPENJ9_VERSION_STRING := $(OPENJ9_TAG)
else
  OPENJ9_BRANCH := $(shell $(GIT) -C $(OPENJ9_TOPDIR) rev-parse --abbrev-ref HEAD)
  ifeq (,$(OPENJ9_BRANCH))
    $(error Could not determine OpenJ9 branch)
  endif
  OPENJ9_VERSION_STRING := $(OPENJ9_BRANCH)-$(OPENJ9_SHA)
endif

ifeq (true,$(OPENJ9_ENABLE_CMAKE))
  # If a logging level was specified that shows commands, tell cmake to do likewise.
  ifneq (,$(or $(filter true,$(LOG_CMDLINES)),$(filter debug trace,$(LOG_LEVEL))))
    MAKE_ARGS += VERBOSE=ON
  endif
else
  # MAKEFLAGS, as inherited from openjdk, includes options (e.g. '-r' and '-R')
  # that don't work well with OpenJ9 and OMR when not using cmake.
  unexport MAKEFLAGS
  # Filter out unwanted make flags.
  MAKE_ARGS := $(filter-out -R -r -s,$(MAKE_ARGS))
  ifneq (,$(JOBS))
    MAKE_ARGS += -j $(JOBS)
  endif
endif # OPENJ9_ENABLE_CMAKE

# Propagate configure option '--disable-warnings-as-errors-omr' to OMR.
ifeq (false,$(WARNINGS_AS_ERRORS_OMR))
  OMR_EXTRA_CONFIGURE_ARGS := --disable-warnings-as-errors
endif

# Propagate configure option '--disable-warnings-as-errors-openj9' to OpenJ9.
ifeq (false,$(WARNINGS_AS_ERRORS_OPENJ9))
  export UMA_SUPPRESS_WARNINGS_AS_ERRORS := 1
endif

ifeq (windows,$(OPENJDK_TARGET_OS))
  # convert windows path to unix path
  UnixPath = $(shell $(PATHTOOL) -u $1)
  # set Visual Studio environment
  # wrap PATH in quotes as it contains spaces (unix path)
  EXPORT_COMPILER_ENV_VARS := PATH="$(PATH)"
else ifeq (zos,$(OPENJDK_TARGET_OS))
  UnixPath = $1
  # Allow options to follow the input file name
  EXPORT_COMPILER_ENV_VARS := _CC_CCMODE=1 _C89_CCMODE=1 _CXX_CCMODE=1
else
  UnixPath = $1
  EXPORT_COMPILER_ENV_VARS :=
endif

.PHONY : \
	build-j9 \
	clean-j9 \
	clean-j9-dist \
	clean-openj9-thirdparty-binaries \
	openj9-config-headers \
	run-preprocessors-j9 \
	stage-j9 \
	#

# openj9_copy_tree
# ----------------
# $1 = The target directory to create or update.
# $2 = The source directory to copy.
openj9_copy_tree = $(call openj9_copy_tree_impl,$(strip $1),$(strip $2))

OPENJ9_MARKER_FILE := .up-to-date

# Use '-m' to update file modification times ('-m' is equivalent to '--touch' in some implementations of tar).
define openj9_copy_tree_impl
	@$(MKDIR) -p $1
	@$(TAR) --create --directory=$2 $(if $(wildcard $1/$(OPENJ9_MARKER_FILE)),--newer=$1/$(OPENJ9_MARKER_FILE)) --exclude=.git . \
		| $(TAR) --extract --directory=$1 -m
	@$(TOUCH) $1/$(OPENJ9_MARKER_FILE)
endef

ifeq (true,$(OPENJ9_ENABLE_CMAKE))
  CONFIG_HEADERS := j9cfg.h omr/omrcfg.h
else
  CONFIG_HEADERS := include/j9cfg.h omr/include_core/omrcfg.h
endif

define openj9_config_header_rules
  openj9-config-headers : $(SUPPORT_OUTPUTDIR)/openj9_include/$(notdir $1)

  $(SUPPORT_OUTPUTDIR)/openj9_include/$(notdir $1) : $1
	$$(call install-file)
endef

$(foreach file, \
	$(CONFIG_HEADERS), \
	$(eval $(call openj9_config_header_rules, $(OPENJ9_VM_BUILD_DIR)/$(file))))

# openj9_test_image_rules
# -----------------------
# $1 = absolute library path
define openj9_test_image_rules
  openj9_test_image : $(TEST_IMAGE_DIR)/openj9/$(notdir $(strip $1))

  $(TEST_IMAGE_DIR)/openj9/$(notdir $(strip $1)) : $(strip $1)
	$$(call install-file)
	$$(call CodesignFile,"$$@")
endef

$(foreach file, \
	$(patsubst %, $(OPENJ9_VM_BUILD_DIR)/%$(EXECUTABLE_SUFFIX), \
		algotest \
		bcvunit \
		cfdump \
		ctest \
		dyntest \
		gc_rwlocktest \
		glaunch \
		invtest \
		jsigjnitest \
		nativevmargs \
		pltest \
		propstest \
		shrtest \
		testjep178_dynamic \
		testjep178_static \
		thrstatetest \
		vmLifecyleTests \
		vmtest \
		) \
	$(patsubst %, $(OPENJ9_VM_BUILD_DIR)/$(call SHARED_LIBRARY,%), \
		access \
		anntests \
		balloon29 \
		bcuwhite \
		bcvrelationships \
		bcvwhite \
		gptest \
		hooktests \
		j9aixbaddep \
		j9ben \
		j9lazyClassLoad \
		j9thrnumanatives29 \
		j9thrtestnatives29 \
		j9unresolved \
		j9vmtest \
		jcoregen29 \
		jlmagent29 \
		jniargtests \
		jvmtitest \
		memorywatcher29 \
		migration \
		osmemory29 \
		SharedClassesNativeAgent \
		softmxtest \
		testjvmtiA \
		testjvmtiB \
		testlibA \
		testlibB \
		vmruntimestateagent29 \
		) \
	$(OPENJ9_VM_BUILD_DIR)/libloadLibraryTest.jnilib, \
	$(if $(wildcard $(file)), \
		$(eval $(call openj9_test_image_rules, $(file)))))

# Comments for stage-j9
# Currently there is a staged location where j9 is built.  This is due to a number of reasons:
# 1. make currently leaves output files in current directory
# 2. generated source and header files
# 3. repo layout compared to source.zip layout
# See issue 49 for more information and actions to correct this action.

# Functions to generate sed program fragments.
# $1 - name of flag to be enabled or disabled.
SedDisable = -e '/"$(strip $1)"/s/"true"/"false"/g'
SedEnable  = -e '/"$(strip $1)"/s/"false"/"true"/g'

# Adjust features based on our configuration.
ifeq (true,$(OPENJ9_ENABLE_CUDA))
  FEATURE_SED_SCRIPT := $(call SedEnable,opt_cuda)
else
  FEATURE_SED_SCRIPT := $(call SedDisable,opt_cuda)
endif

# Function to generate sed program fragment.
# $1 - name of make macro to use instead of a hard-coded tool reference.
# $2 - suffix of uma_make_cmd property name to be adjusted.
SedUmaCommand = -e '/<property name="uma_make_cmd_$(strip $2)"/s|value="[^"]*"|value="$($(strip $1))"|'

# Copy configured values to relevant UMA properties in .spec files.
SPEC_SED_SCRIPT := \
	$(call SedUmaCommand, CC,  cc) \
	$(call SedUmaCommand, CXX, cxx) \
	$(call SedUmaCommand, CXX, interp_gcc) \
	$(call SedUmaCommand, CXX, ppc_gcc_cxx) \
	#

# Adjust DDR enablement flags.
ifeq (true,$(OPENJ9_ENABLE_DDR))
  FEATURE_SED_SCRIPT += $(call SedEnable,opt_useOmrDdr)
  SPEC_SED_SCRIPT    += $(call SedEnable,module_ddr)
else
  FEATURE_SED_SCRIPT += $(call SedDisable,opt_useOmrDdr)
  SPEC_SED_SCRIPT    += $(call SedDisable,module_ddr)
endif

# Adjust JITServer enablement flags.
ifeq (true,$(OPENJ9_ENABLE_JITSERVER))
  FEATURE_SED_SCRIPT += $(call SedEnable,opt_jitserver)
else
  FEATURE_SED_SCRIPT += $(call SedDisable,opt_jitserver)
endif

# Adjust CRAC Support enablement flags.
ifeq (true,$(OPENJ9_ENABLE_CRAC_SUPPORT))
  FEATURE_SED_SCRIPT += $(call SedEnable,opt_cracSupport)
else # OPENJ9_ENABLE_CRAC_SUPPORT
  FEATURE_SED_SCRIPT += $(call SedDisable,opt_cracSupport)
endif # OPENJ9_ENABLE_CRAC_SUPPORT

# Adjust CRIU Support enablement flags.
ifeq (true,$(OPENJ9_ENABLE_CRIU_SUPPORT))
  FEATURE_SED_SCRIPT += $(call SedEnable,opt_criuSupport)
else # OPENJ9_ENABLE_CRIU_SUPPORT
  FEATURE_SED_SCRIPT += $(call SedDisable,opt_criuSupport)
endif # OPENJ9_ENABLE_CRIU_SUPPORT

# Adjust OpenJDK MethodHandles enablement flags.
ifeq (true,$(OPENJ9_ENABLE_OPENJDK_METHODHANDLES))
  FEATURE_SED_SCRIPT += $(call SedDisable,opt_methodHandle)
  FEATURE_SED_SCRIPT += $(call SedEnable,opt_openjdkMethodhandle)
else # OPENJ9_ENABLE_OPENJDK_METHODHANDLES
  FEATURE_SED_SCRIPT += $(call SedEnable,opt_methodHandle)
  FEATURE_SED_SCRIPT += $(call SedDisable,opt_openjdkMethodhandle)
endif # OPENJ9_ENABLE_OPENJDK_METHODHANDLES

# Disable windows rebase.
SPEC_SED_SCRIPT += $(call SedDisable,uma_windowsRebase)

# openj9_stage_buildspec_file
# ---------------------------
# $1 = The simple name of the file to copy.
define openj9_stage_buildspec_file
stage-j9 : $(OUTPUTDIR)/vm/buildspecs/$1
$(OUTPUTDIR)/vm/buildspecs/$1 : $(OPENJ9_TOPDIR)/buildspecs/$1
	@$(MKDIR) -p $$(@D)
  ifeq (.feature,$(suffix $1))
	@$(SED) $(FEATURE_SED_SCRIPT) < $$< > $$@
  else ifeq (.spec,$(suffix $1))
	@$(SED) $(SPEC_SED_SCRIPT) < $$< > $$@
  else
	@$(CP) $$< $$@
  endif
endef

$(foreach file, \
	$(notdir $(wildcard $(OPENJ9_TOPDIR)/buildspecs/*)), \
	$(eval $(call openj9_stage_buildspec_file,$(file))))

stage-j9 :
	@$(ECHO) Staging OpenJ9 runtime in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm,$(OPENJ9_TOPDIR)/runtime)

	@$(ECHO) Staging OpenJ9 OMR in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm/omr,$(OPENJ9OMR_TOPDIR))

OPENJ9_VERSION_VARS := \
	COMPANY_NAME \
	COMPILER_VERSION_STRING \
	J9JDK_EXT_NAME \
	J9JDK_EXT_VERSION \
	OPENJ9_TAG \
	OPENJ9_VERSION_STRING \
	OPENJDK_SHA \
	OPENJDK_TAG \
	OPENJDK_TARGET_CPU_BITS \
	OPENJDK_TARGET_CPU_OSARCH \
	OPENJDK_TARGET_OS \
	PRODUCT_NAME \
	PRODUCT_SUFFIX \
	USERNAME \
	VENDOR_URL \
	VERSION_STRING \
	#

OPENJ9_VERSION_SCRIPT := \
	$(foreach var,$(OPENJ9_VERSION_VARS),-e 's|@$(var)@|$(value $(var))|g')

$(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h : $(TOPDIR)/closed/openj9_version_info.h.in
	@$(MKDIR) -p $(@D)
	@$(SED) $(OPENJ9_VERSION_SCRIPT) > $@ < $<
	@$(ECHO) "==== $(@F) ===="
	@$(GREP) define $@
	@$(ECHO) "===="

# capture values for use with DependOnVariable
OPENJ9_VERSION_MAP := $(foreach var,$(sort $(OPENJ9_VERSION_VARS)),$(var)='$(value $(var))')

# update if the map changes
$(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h : $(call DependOnVariable,OPENJ9_VERSION_MAP)

# Only update version files when the SHAs change.
$(OPENJ9_VM_BUILD_DIR)/compiler/jit.version : $(call DependOnVariable, OPENJ9_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define TR_LEVEL_NAME "$(OPENJ9_SHA)"' > $@

$(OPENJ9_VM_BUILD_DIR)/omr/OMR_VERSION_STRING : $(call DependOnVariable, OPENJ9OMR_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define OMR_VERSION_STRING "$(OPENJ9OMR_SHA)"' > $@

run-preprocessors-j9 : \
	$(OPENJ9_VM_BUILD_DIR)/omr/OMR_VERSION_STRING \
	$(OPENJ9_VM_BUILD_DIR)/compiler/jit.version \
	$(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h

ifeq (true,$(OPENJ9_ENABLE_CMAKE))

  CMAKE_ARGS := \
	-C $(OPENJ9_TOPDIR)/runtime/cmake/caches/$(patsubst %_cross,%,$(OPENJ9_BUILDSPEC)).cmake \
	-DBOOT_JDK="$(BOOT_JDK)" \
	-DBUILD_ID=$(BUILD_ID) \
	-DCMAKE_TOOLCHAIN_FILE="$(OUTPUTDIR)/toolchain.cmake" \
	-DJ9VM_OMR_DIR="$(OPENJ9OMR_TOPDIR)" \
	-DJAVA_SPEC_VERSION=$(VERSION_FEATURE) \
	-DOMR_DDR=$(OPENJ9_ENABLE_DDR) \
	-DOMR_MIXED_REFERENCES_MODE=$(OMR_MIXED_REFERENCES_MODE) \
	-DOPENJ9_BUILD=true \
	-DOPENJ9_SHA=$(OPENJ9_SHA) \
	-DOPENJDK_VERSION_NUMBER_FOUR_POSITIONS=$(VERSION_NUMBER_FOUR_POSITIONS) \
	#

  # Windows can't specify compiler overrides since we already generated wrapper scripts.
  ifneq (windows,$(OPENJDK_TARGET_OS))
    # Override the compilers if an OPENJ9_* value is specified.
    # Otherwise, toolchain.cmake has the default values.
    ifneq (,$(OPENJ9_CC))
      CMAKE_ARGS += -DCMAKE_C_COMPILER="$(OPENJ9_CC)"
    endif
    ifneq (,$(OPENJ9_CXX))
      CMAKE_ARGS += -DCMAKE_CXX_COMPILER="$(OPENJ9_CXX)"
    endif
  endif # windows

  ifneq (,$(CCACHE))
    # openjdk makefiles add a bunch of environemnt variables to the ccache command.
    # CMake will not parse this properly, so we wrap the whole thing in the env command.
    # We also need to add semicolons between arguments or else cmake will treat the whole
    # thing as one long command name.

    # Note: We remove the CCACHE_COMPRESS option that openjdk adds, because it significantly
    # slows down the build (to the point of erasing any gains from using ccache).
    CCACHE_NOCOMPRESS := $(filter-out CCACHE_COMPRESS=1,$(CCACHE))
    ESCAPED_CCACHE := env$(subst $(SPACE),,$(addprefix ;,$(CCACHE_NOCOMPRESS)))

    CMAKE_ARGS += -DCMAKE_C_COMPILER_LAUNCHER="$(ESCAPED_CCACHE)"
    CMAKE_ARGS += -DCMAKE_CXX_COMPILER_LAUNCHER="$(ESCAPED_CCACHE)"
  endif # CCACHE

  ifeq (true,$(OPENJ9_ENABLE_JITSERVER))
    CMAKE_ARGS += -DJ9VM_OPT_JITSERVER=ON

    ifneq (,$(OPENSSL_CFLAGS))
      CMAKE_ARGS += -DOPENSSL_CFLAGS="$(OPENSSL_CFLAGS)"
    endif

    ifneq (,$(OPENSSL_DIR))
      CMAKE_ARGS += -DOPENSSL_DIR="$(OPENSSL_DIR)"
    endif

    ifneq (,$(OPENSSL_BUNDLE_LIB_PATH))
      CMAKE_ARGS += -DOPENSSL_BUNDLE_LIB_PATH="$(OPENSSL_BUNDLE_LIB_PATH)"
    endif
  else
    CMAKE_ARGS += -DJ9VM_OPT_JITSERVER=OFF
  endif # OPENJ9_ENABLE_JITSERVER

  ifeq (true,$(OPENJ9_ENABLE_CUDA))
    CMAKE_ARGS += -DJ9VM_OPT_CUDA=ON -DOMR_CUDA_HOME="$(call UnixPath,$(CUDA_HOME))"
  else # OPENJ9_ENABLE_CUDA
    CMAKE_ARGS += -DJ9VM_OPT_CUDA=OFF
  endif # OPENJ9_ENABLE_CUDA

  ifeq (true,$(OPENJ9_ENABLE_CRAC_SUPPORT))
    CMAKE_ARGS += -DJ9VM_OPT_CRAC_SUPPORT=ON
  else # OPENJ9_ENABLE_CRAC_SUPPORT
    CMAKE_ARGS += -DJ9VM_OPT_CRAC_SUPPORT=OFF
  endif # OPENJ9_ENABLE_CRAC_SUPPORT

  ifeq (true,$(OPENJ9_ENABLE_CRIU_SUPPORT))
    CMAKE_ARGS += -DJ9VM_OPT_CRIU_SUPPORT=ON
  else # OPENJ9_ENABLE_CRIU_SUPPORT
    CMAKE_ARGS += -DJ9VM_OPT_CRIU_SUPPORT=OFF
  endif # OPENJ9_ENABLE_CRIU_SUPPORT

  ifeq (true,$(OPENJ9_ENABLE_OPENJDK_METHODHANDLES))
    CMAKE_ARGS += -DJ9VM_OPT_METHOD_HANDLE=OFF
    CMAKE_ARGS += -DJ9VM_OPT_OPENJDK_METHODHANDLE=ON
  else # OPENJ9_ENABLE_OPENJDK_METHODHANDLES
    CMAKE_ARGS += -DJ9VM_OPT_METHOD_HANDLE=ON
    CMAKE_ARGS += -DJ9VM_OPT_OPENJDK_METHODHANDLE=OFF
  endif # OPENJ9_ENABLE_OPENJDK_METHODHANDLES

  # Propagate configure option '--disable-warnings-as-errors-omr' to OMR.
  ifeq (false,$(WARNINGS_AS_ERRORS_OMR))
    CMAKE_ARGS += -DOMR_WARNINGS_AS_ERRORS=OFF
  endif

  # Propagate configure option '--disable-warnings-as-errors-openj9' to OpenJ9.
  ifeq (false,$(WARNINGS_AS_ERRORS_OPENJ9))
    CMAKE_ARGS += -DJ9VM_WARNINGS_AS_ERRORS=OFF
 endif

  # Do this last so extra args take precedence.
  CMAKE_ARGS += $(EXTRA_CMAKE_ARGS)

$(OUTPUTDIR)/vm/cmake.stamp :
	@$(MKDIR) -p $(@D)
	cd $(@D) && $(EXPORT_COMPILER_ENV_VARS) $(CMAKE) $(CMAKE_ARGS) $(OPENJ9_TOPDIR)
	$(TOUCH) $@

run-preprocessors-j9 : $(OUTPUTDIR)/vm/cmake.stamp

else # OPENJ9_ENABLE_CMAKE

run-preprocessors-j9 : stage-j9
	@$(ECHO) Running OpenJ9 preprocessors with OPENJ9_BUILDSPEC: $(OPENJ9_BUILDSPEC)
	+BOOT_JDK=$(BOOT_JDK) $(EXPORT_COMPILER_ENV_VARS) OPENJDK_VERSION_NUMBER_FOUR_POSITIONS=$(VERSION_NUMBER_FOUR_POSITIONS) \
		$(MAKE) $(MAKE_ARGS) -C $(OUTPUTDIR)/vm -f $(OPENJ9_TOPDIR)/runtime/buildtools.mk \
			BUILD_ID=$(BUILD_ID) \
			DEST_DIR=$(call MixedPath,$(J9TOOLS_DIR)) \
			EXTRA_CONFIGURE_ARGS=$(OMR_EXTRA_CONFIGURE_ARGS) \
			FREEMARKER_JAR="$(FREEMARKER_JAR)" \
			J9VM_SHA=$(OPENJ9_SHA) \
			JAVA_HOME=$(BOOT_JDK) \
			OMR_DIR=$(OUTPUTDIR)/vm/omr \
			SOURCETOOLS_DIR=$(call MixedPath,$(OPENJ9_TOPDIR))/sourcetools \
			SPEC=$(OPENJ9_BUILDSPEC) \
			UMA_OPTIONS_EXTRA="-buildDate $(shell date +'%Y%m%d')" \
			VERSION_MAJOR=$(VERSION_FEATURE) \
			tools

endif # OPENJ9_ENABLE_CMAKE

CUSTOM_COMPILER_ENV_VARS :=

ifneq (,$(OPENJ9_CC))
  CUSTOM_COMPILER_ENV_VARS += CC="$(OPENJ9_CC)"
endif
ifneq (,$(OPENJ9_CXX))
  CUSTOM_COMPILER_ENV_VARS += CXX="$(OPENJ9_CXX)"
endif
ifneq (,$(OPENJ9_DEVELOPER_DIR))
  CUSTOM_COMPILER_ENV_VARS += DEVELOPER_DIR="$(OPENJ9_DEVELOPER_DIR)"
endif
ifeq (true,$(OPENJ9_ENABLE_JITSERVER))
  ifneq (true,$(OPENJ9_ENABLE_CMAKE))
    CUSTOM_COMPILER_ENV_VARS += J9VM_OPT_JITSERVER=1

    ifneq (,$(OPENSSL_CFLAGS))
      CUSTOM_COMPILER_ENV_VARS += OPENSSL_CFLAGS="$(OPENSSL_CFLAGS)"
    endif

    ifneq (,$(OPENSSL_DIR))
      CUSTOM_COMPILER_ENV_VARS += OPENSSL_DIR="$(OPENSSL_DIR)"
    endif

    ifneq (,$(OPENSSL_BUNDLE_LIB_PATH))
      CUSTOM_COMPILER_ENV_VARS += OPENSSL_BUNDLE_LIB_PATH="$(OPENSSL_BUNDLE_LIB_PATH)"
    endif
  endif # OPENJ9_ENABLE_CMAKE
endif # OPENJ9_ENABLE_JITSERVER

ifneq (true,$(OPENJ9_ENABLE_DDR))
  DDR_COMMAND :=
else ifeq (true,$(OPENJ9_ENABLE_CMAKE))
  DDR_COMMAND := $(EXPORT_COMPILER_ENV_VARS) $(MAKE) $(MAKE_ARGS) -C $(OPENJ9_VM_BUILD_DIR) j9ddr
else
  DDR_COMMAND := CC="$(CC)" CXX="$(CXX)" $(EXPORT_COMPILER_ENV_VARS) \
	$(MAKE) $(MAKE_ARGS) -C $(OUTPUTDIR)/vm/ddr -f run_omrddrgen.mk
endif # OPENJ9_ENABLE_DDR

build-j9 : run-preprocessors-j9
	@$(ECHO) "Compiling OpenJ9 in $(OUTPUTDIR)/vm"
	$(call ShowVersions)
	+OPENJ9_BUILD=true $(EXPORT_COMPILER_ENV_VARS) $(CUSTOM_COMPILER_ENV_VARS) \
		$(MAKE) $(MAKE_ARGS) -C $(OUTPUTDIR)/vm all
	@$(ECHO) OpenJ9 compile complete
	+$(DDR_COMMAND)

clean-j9 : clean-openj9-thirdparty-binaries
	+$(MAKE) $(MAKE_ARGS) -C $(OUTPUTDIR)/vm clean

clean-j9-dist : clean-openj9-thirdparty-binaries
	$(RM) -fdr $(OUTPUTDIR)/vm

clean-openj9-thirdparty-binaries :
	$(RM) -f $(OPENJ9_STAGED_THIRDPARTY_BINARIES) $(patsubst %.jar,%.tar.gz,$(OPENJ9_STAGED_THIRDPARTY_BINARIES))
