# ===========================================================================
# (c) Copyright IBM Corp. 2017, 2019 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

# spec.gmk is generated by configure and contains many of the variable definitions used in this makefile
ifeq (,$(wildcard $(SPEC)))
  $(error OpenJ9.gmk needs SPEC set to a proper spec.gmk)
endif
include $(SPEC)
include $(TOPDIR)/make/common/MakeBase.gmk

default :
	$(error OpenJ9.gmk has no default target)

ifeq (,$(BUILD_ID))
  BUILD_ID := 000000
endif

OPENJ9_SHA := $(shell git -C $(OPENJ9_TOPDIR) rev-parse --short HEAD)
ifeq (,$(OPENJ9_SHA))
  $(error Could not determine OpenJ9 SHA)
endif

# Find OpenJ9 tag associated with current commit specified by OPENJ9_SHA
# (suppressing stderr in case there is no such tag).
OPENJ9_TAG := $(shell git -C $(OPENJ9_TOPDIR) describe --exact-match $(OPENJ9_SHA) 2>/dev/null)
ifeq (,$(OPENJ9_TAG))
  OPENJ9_BRANCH := $(shell git -C $(OPENJ9_TOPDIR) rev-parse --abbrev-ref HEAD)
  ifeq (,$(OPENJ9_BRANCH))
    $(error Could not determine OpenJ9 Branch)
  endif
  OPENJ9_VERSION_STRING := $(OPENJ9_BRANCH)-$(OPENJ9_SHA)
else
  OPENJ9_VERSION_STRING := $(OPENJ9_TAG)
endif

OPENJ9OMR_SHA := $(shell git -C $(OPENJ9OMR_TOPDIR) rev-parse --short HEAD)
ifeq (,$(OPENJ9OMR_SHA))
  $(error Could not determine OMR SHA)
endif

# openjdk makeflags don't work with openj9/omr native compiles; override with number of CPUs which openj9 and omr need supplied
override MAKEFLAGS := -j $(JOBS)

# Propagate configure option '--disable-warnings-as-errors-omr' to OMR.
ifeq (false,$(WARNINGS_AS_ERRORS_OMR))
  OMR_EXTRA_CONFIGURE_ARGS := --disable-warnings-as-errors
endif

# Propagate configure option '--disable-warnings-as-errors-openj9' to OpenJ9.
ifeq (false,$(WARNINGS_AS_ERRORS_OPENJ9))
  export UMA_SUPPRESS_WARNINGS_AS_ERRORS := 1
endif

ifeq (windows,$(OPENJDK_TARGET_OS))
  # set Visual Studio environment
  # wrap PATH in quotes as it contains spaces (unix path)
  # INCLUDE, LIB are already wrapped in quotes (windows paths)
  EXPORT_MSVS_ENV_VARS := PATH="$(PATH)" INCLUDE=$(INCLUDE) LIB=$(LIB)
  # On Windows, the mingw compiler is used for certain files such as
  # the bytecode interpreter.
  # Uncomment the following line to use the default compiler throughout.
  # EXPORT_NO_USE_MINGW := NO_USE_MINGW=true
  # set the output directory for shared libraries
  OPENJ9_BIN_OR_LIB_DIR := bin
else
  EXPORT_MSVS_ENV_VARS :=
  EXPORT_NO_USE_MINGW :=
  OPENJ9_BIN_OR_LIB_DIR := lib
endif

.PHONY : \
	build-j9 \
	build-openj9-tools \
	clean-j9 \
	clean-j9-dist \
	create_build_jdk \
	generate-j9jcl-sources \
	openj9_build_jdk \
	run-preprocessors-j9 \
	stage-j9 \
	stage-openj9-tools \
	#

# openj9_copy_tree
# ----------------
# $1 = The target directory to create or update.
# $2 = The source directory to copy.
openj9_copy_tree = $(call openj9_copy_tree_impl,$(strip $1),$(strip $2))

OPENJ9_MARKER_FILE := .up-to-date

# Use '-m' to update file modification times ('-m' is equivalent to '--touch' in some implementations of tar).
define openj9_copy_tree_impl
	@$(MKDIR) -p $1
	@$(TAR) --create --directory=$2 $(if $(wildcard $1/$(OPENJ9_MARKER_FILE)),--newer=$1/$(OPENJ9_MARKER_FILE)) --exclude=.git . \
		| $(TAR) --extract --directory=$1 -m
	@$(TOUCH) $1/$(OPENJ9_MARKER_FILE)
endef

openj9_build_jdk : build-j9
	+$(MAKE) -f $(TOPDIR)/closed/OpenJ9.gmk create_build_jdk

# openj9_add_jdk_rules
# --------------------
# $1 = target file to create or update
# $2 = source file to copy
define openj9_add_jdk_rules
create_build_jdk : $(strip $1)
$(strip $1) : $(strip $2)
	$$(call install-file)
endef

# openj9_add_jdk_basic
# --------------------
# $1 = target directories
# $2 = source paths (relative to the vm build directory)
openj9_add_jdk_basic = \
	$(foreach target, $1, \
		$(foreach source, $2, \
			$(eval $(call openj9_add_jdk_rules, \
				$(target)/$(notdir $(source)), \
				$(OPENJ9_VM_BUILD_DIR)/$(source)))))

# openj9_add_jdk_bin
# ------------------
# $1 = module name
# $2 = source paths (relative to the vm build directory)
openj9_add_jdk_bin = \
	$(call openj9_add_jdk_basic, \
		$(addsuffix /$(OPENJ9_LIBS_SUBDIR), \
			$(JDK_OUTPUTDIR)/$(OPENJ9_BIN_OR_LIB_DIR) $(call FindLibDirForModule, $1)), \
		$2)

# openj9_add_jdk_shlibs
# ---------------------
# $1 = module name
# $2 = simple library names (relative to the vm build directory)
openj9_add_jdk_shlibs = \
	$(call openj9_add_jdk_bin, \
		$1, \
		$(foreach lib, $2, \
			$(patsubst ./%,%,$(dir $(lib))$(call SHARED_LIBRARY,$(notdir $(lib))))))

# openj9_add_jdk_lib
# ------------------
# $1 = module name
# $2 = source paths (relative to the vm build directory)
openj9_add_jdk_lib = $(call openj9_add_jdk_basic, $(JDK_OUTPUTDIR)/lib $(call FindLibDirForModule, $1), $2)

# openj9_add_jdk_special
# ----------------------
# $1 = target file name
# $2 = source path (relative to the vm build directory)
openj9_add_jdk_special = \
	$(foreach target, $(JDK_OUTPUTDIR)/$(OPENJ9_BIN_OR_LIB_DIR) $(call FindLibDirForModule, java.base), \
		$(eval $(call openj9_add_jdk_rules, $(target)/$(strip $1), $(OPENJ9_VM_BUILD_DIR)/$(strip $2))))

# redirector

$(foreach subdir, j9vm server, \
	$(call openj9_add_jdk_special, \
		$(subdir)/$(call SHARED_LIBRARY,jvm), \
		redirector/$(call SHARED_LIBRARY,jvm)))

# jsig

$(foreach subdir, j9vm server, \
	$(call openj9_add_jdk_special, \
		$(subdir)/$(call SHARED_LIBRARY,jsig), \
		$(call SHARED_LIBRARY,jsig)))

$(call openj9_add_jdk_special, \
	$(call SHARED_LIBRARY,jsig), \
	$(call SHARED_LIBRARY,jsig))

# java.base

$(call openj9_add_jdk_shlibs, java.base, \
	j9dmp29 \
	j9gc29 \
	j9gcchk29 \
	j9hookable29 \
	j9jit29 \
	j9jnichk29 \
	j9jvmti29 \
	j9prt29 \
	j9thr29 \
	j9trc29 \
	j9vm29 \
	j9vmchk29 \
	j9vrb29 \
	j9zlib29 \
	jclse29 \
	jvm \
	omrsig \
	)

ifeq (windows,$(OPENJDK_TARGET_OS))
  $(call openj9_add_jdk_lib, java.base, lib/$(call STATIC_LIBRARY,jsig))
  $(eval $(call openj9_add_jdk_rules, \
	$(call FindLibDirForModule, java.base)/$(call STATIC_LIBRARY,jvm), \
	$(OUTPUTDIR)/vm/redirector/$(call STATIC_LIBRARY,redirector_jvm)))
endif

$(call openj9_add_jdk_lib, java.base, \
	$(notdir $(wildcard $(OPENJ9_VM_BUILD_DIR)/java*.properties)) \
	options.default \
	)

ifeq (true,$(OPENJ9_ENABLE_DDR))
$(call openj9_add_jdk_bin, java.base, j9ddr.dat)

.PHONY : run-ddrgen
$(OPENJ9_VM_BUILD_DIR)/j9ddr.dat : run-ddrgen

run-ddrgen :
ifeq (true,$(OPENJ9_ENABLE_CMAKE))
	$(MAKE) -C $(OPENJ9_VM_BUILD_DIR) j9ddr
else
	export CC="$(CC)" CXX="$(CXX)" $(EXPORT_MSVS_ENV_VARS) \
		&& $(MAKE) -C $(OUTPUTDIR)/vm/ddr -f run_omrddrgen.mk
endif # OPENJ9_ENABLE_CMAKE
endif # OPENJ9_ENABLE_DDR

$(eval $(call openj9_add_jdk_rules, \
	$(call FindLibDirForModule, java.base)/openj9-notices.html, \
	$(TOPDIR)/openj9/longabout.html))

# contributions to other modules
$(call openj9_add_jdk_shlibs, java.management, management management_ext)
$(call openj9_add_jdk_shlibs, openj9.cuda, cuda4j29)
$(call openj9_add_jdk_shlibs, openj9.dtfj, j9jextract)
$(call openj9_add_jdk_shlibs, openj9.sharedclasses, j9shr29)
$(call openj9_add_jdk_lib, openj9.traceformat, J9TraceFormat.dat OMRTraceFormat.dat)

# openj9_test_image_rules
# -----------------------
# $1 = absolute library path
define openj9_test_image_rules
openj9_test_image : $(TEST_IMAGE_DIR)/openj9/$(notdir $(strip $1))
$(TEST_IMAGE_DIR)/openj9/$(notdir $(strip $1)) : $(strip $1)
	$$(call install-file)
endef

$(foreach file, \
	$(patsubst %, $(OPENJ9_VM_BUILD_DIR)/%$(EXE_SUFFIX), \
		algotest \
		bcvunit \
		cfdump \
		ctest \
		dyntest \
		gc_rwlocktest \
		glaunch \
		invtest \
		jsigjnitest \
		nativevmargs \
		pltest \
		propstest \
		shrtest \
		testjep178_dynamic \
		testjep178_static \
		thrstatetest \
		vmLifecyleTests \
		vmtest \
		) \
	$(patsubst %, $(OPENJ9_VM_BUILD_DIR)/$(call SHARED_LIBRARY,%), \
		balloon29 \
		bcuwhite \
		bcvwhite \
		gptest \
		hooktests \
		j9aixbaddep \
		j9ben \
		j9lazyClassLoad \
		j9thrnumanatives29 \
		j9thrtestnatives29 \
		j9unresolved \
		j9vmtest \
		jcoregen29 \
		jlmagent29 \
		jniargtests \
		jvmtitest \
		memorywatcher29 \
		migration \
		osmemory29 \
		SharedClassesNativeAgent \
		softmxtest \
		testjvmtiA \
		testjvmtiB \
		testlibA \
		testlibB \
		vmruntimestateagent29 \
		) \
	$(patsubst %, $(OPENJ9_VM_BUILD_DIR)/lib%.jnilib, \
		loadLibraryTest \
		), \
	$(if $(wildcard $(file)), \
		$(eval $(call openj9_test_image_rules, $(file)))))

# Comments for stage-j9
# Currently there is a staged location where j9 is built.  This is due to a number of reasons:
# 1. make currently leaves output files in current directory
# 2. generated source and header files
# 3. repo layout compared to source.zip layout
# See issue 49 for more information and actions to correct this action.

# Functions to generate sed program fragments.
# $1 - name of flag to be enabled or disabled.
SedDisable = -e '/"$(strip $1)"/s/"true"/"false"/g'
SedEnable  = -e '/"$(strip $1)"/s/"false"/"true"/g'

# Adjust features based on our configuration.
ifeq (true,$(OPENJ9_ENABLE_CUDA))
  FEATURE_SED_SCRIPT := $(call SedEnable,opt_cuda)
else
  FEATURE_SED_SCRIPT := $(call SedDisable,opt_cuda)
endif

# Function to generate sed program fragment.
# $1 - name of make macro to use instead of a hard-coded tool reference.
# $2 - suffix of uma_make_cmd property name to be adjusted.
SedUmaCommand = -e '/<property name="uma_make_cmd_$(strip $2)"/s|value="[^"]*"|value="$($(strip $1))"|'

# Copy configured values to relevant UMA properties in .spec files.
SPEC_SED_SCRIPT := \
	$(call SedUmaCommand, CC,  cc) \
	$(call SedUmaCommand, CXX, cxx) \
	$(call SedUmaCommand, CXX, interp_gcc) \
	$(call SedUmaCommand, CXX, ppc_gcc_cxx) \
	#

# Adjust DDR enablement flags.
ifeq (true,$(OPENJ9_ENABLE_DDR))
  FEATURE_SED_SCRIPT += $(call SedEnable,opt_useOmrDdr)
  SPEC_SED_SCRIPT    += $(call SedEnable,module_ddr)
else
  FEATURE_SED_SCRIPT += $(call SedDisable,opt_useOmrDdr)
  SPEC_SED_SCRIPT    += $(call SedDisable,module_ddr)
endif

# Disable windows rebase.
SPEC_SED_SCRIPT += $(call SedDisable,uma_windowsRebase)

# openj9_stage_buildspec_file
# ---------------------------
# $1 = The simple name of the file to copy.
define openj9_stage_buildspec_file
stage-j9 : $(OUTPUTDIR)/vm/buildspecs/$1
$(OUTPUTDIR)/vm/buildspecs/$1 : $(OPENJ9_TOPDIR)/buildspecs/$1
	@$(MKDIR) -p $$(@D)
  ifeq (.feature,$(suffix $1))
	@$(SED) $(FEATURE_SED_SCRIPT) < $$< > $$@
  else ifeq (.spec,$(suffix $1))
	@$(SED) $(SPEC_SED_SCRIPT) < $$< > $$@
  else
	@$(CP) $$< $$@
  endif
endef

$(foreach file, \
	$(notdir $(wildcard $(OPENJ9_TOPDIR)/buildspecs/*)), \
	$(eval $(call openj9_stage_buildspec_file,$(file))))

stage-openj9-tools :
	@$(ECHO) Staging OpenJ9 sourcetools in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm/sourcetools,$(OPENJ9_TOPDIR)/sourcetools)

build-openj9-tools : stage-openj9-tools
	@$(ECHO) Building OpenJ9 tools
	$(MAKE) -C $(OUTPUTDIR)/vm/sourcetools $(MAKEFLAGS) -f buildj9tools.mk \
		JAVA_HOME=$(BOOT_JDK) lib/jpp.jar

stage-j9 : stage-openj9-tools
	@$(ECHO) Staging OpenJ9 debugtools in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm/debugtools,$(OPENJ9_TOPDIR)/debugtools)

	@$(ECHO) Staging OpenJ9 jcl in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm/jcl,$(OPENJ9_TOPDIR)/jcl)

	@$(ECHO) Staging OpenJ9 runtime in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm,$(OPENJ9_TOPDIR)/runtime)

	@$(ECHO) Staging OpenJ9 OMR in $(OUTPUTDIR)/vm
	$(call openj9_copy_tree,$(OUTPUTDIR)/vm/omr,$(OPENJ9OMR_TOPDIR))

OPENJ9_VERSION_VARS := \
	COMPILER_VERSION_STRING \
	HOTSPOT_TARGET_OS \
	J9JDK_EXT_NAME \
	J9JDK_EXT_VERSION \
	OPENJ9_TAG \
	OPENJ9_VERSION_STRING \
	OPENJDK_SHA \
	OPENJDK_TAG \
	OPENJDK_TARGET_CPU_BITS \
	OPENJDK_TARGET_CPU_OSARCH \
	PRODUCT_NAME \
	USERNAME \
	VERSION_STRING \
	#

OPENJ9_VERSION_SCRIPT := \
	$(foreach var,$(OPENJ9_VERSION_VARS),-e 's|@${var}@|$(value $(var))|g')

$(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h : $(TOPDIR)/closed/openj9_version_info.h.in
	@$(MKDIR) -p $(@D)
	@$(SED) $(OPENJ9_VERSION_SCRIPT) > $@ < $<

# capture values for use with DependOnVariable
OPENJ9_VERSION_MAP := $(foreach var,$(sort $(OPENJ9_VERSION_VARS)),$(var)='$(value $(var))')

# update if the map changes
$(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h : $(call DependOnVariable,OPENJ9_VERSION_MAP)

# Only update version files when the SHAs change.
$(OPENJ9_VM_BUILD_DIR)/compiler/jit.version : $(call DependOnVariable, OPENJ9_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define TR_LEVEL_NAME "$(OPENJ9_SHA)"' > $@

$(OPENJ9_VM_BUILD_DIR)/omr/OMR_VERSION_STRING : $(call DependOnVariable, OPENJ9OMR_SHA)
	@$(MKDIR) -p $(@D)
	$(ECHO) '#define OMR_VERSION_STRING "$(OPENJ9OMR_SHA)"' > $@

CUSTOM_COMPILER_ENV_VARS :=

ifneq (,$(OPENJ9_CC))
  CUSTOM_COMPILER_ENV_VARS += CC="$(OPENJ9_CC)"
endif
ifneq (,$(OPENJ9_CXX))
  CUSTOM_COMPILER_ENV_VARS += CXX="$(OPENJ9_CXX)"
endif
ifneq (,$(OPENJ9_DEVELOPER_DIR))
  CUSTOM_COMPILER_ENV_VARS += DEVELOPER_DIR="$(OPENJ9_DEVELOPER_DIR)"
endif

ifeq (true,$(OPENJ9_ENABLE_CMAKE))

  CMAKE_ARGS := \
	-C $(OPENJ9_TOPDIR)/runtime/cmake/caches/$(OPENJ9_BUILDSPEC).cmake \
	-DBOOT_JDK="$(BOOT_JDK)" \
	-DBUILD_ID=$(BUILD_ID) \
	-DJ9VM_OMR_DIR="$(OPENJ9OMR_TOPDIR)" \
	-DJAVA_SPEC_VERSION=$(VERSION_FEATURE) \
	-DOPENJ9_BUILD=true \
	-DOPENJ9_SHA=$(OPENJ9_SHA) \
	#

  ifeq (windows,$(OPENJDK_TARGET_OS))
    CMAKE_ARGS += -DCMAKE_TOOLCHAIN_FILE="$(OUTPUTDIR)/toolchain-win.cmake"
  else
    # We grab the C/C++ compilers detected by autoconf or provided by user, not
    # the CC/CXX variables defined by the makefiles, which potentially include
    # the ccache command which will throw off cmake.
    ifneq (,$(OPENJ9_CC))
      CMAKE_ARGS += -DCMAKE_C_COMPILER="$(OPENJ9_CC)"
    else
      CMAKE_ARGS += -DCMAKE_C_COMPILER="$(ac_cv_prog_CC)"
    endif

    ifneq (,$(OPENJ9_CXX))
      CMAKE_ARGS += -DCMAKE_CXX_COMPILER="$(OPENJ9_CXX)"
    else
      CMAKE_ARGS += -DCMAKE_CXX_COMPILER="$(ac_cv_prog_CXX)"
    endif
  endif # ifeq (windows,$(OPENJDK_TARGET_OS))

  ifneq (,$(CCACHE))
    # openjdk makefiles adds a bunch of environemnt variables to the ccache command.
    # CMake will not parse this properly, so we wrap the whole thing in the env command.
    # We also need to add semicolons between arguments or else cmake will treat the whole
    # thing as one long command name.

    # Note: we remove the CCACHE_COMPRESS option that openjdk adds, because it significantly
    # slows down the build (to the point of erasing any gains from using ccache).
    CCACHE_NOCOMPRESS := $(filter-out CCACHE_COMPRESS=1,$(CCACHE))
    ESCAPED_CCACHE := env$(subst $(SPACE),,$(addprefix ;,$(CCACHE_NOCOMPRESS)))

    CMAKE_ARGS += -DCMAKE_CXX_COMPILER_LAUNCHER="$(ESCAPED_CCACHE)"
    CMAKE_ARGS += -DCMAKE_C_COMPILER_LAUNCHER="$(ESCAPED_CCACHE)"
  endif # CCACHE

  CMAKE_ARGS += -DOMR_DDR=$(OPENJ9_ENABLE_DDR)
  CMAKE_ARGS += $(EXTRA_CMAKE_ARGS)

$(OUTPUTDIR)/vm/cmake.stamp :
	cd $(@D) && $(CMAKE) $(CMAKE_ARGS) $(OPENJ9_TOPDIR)
	$(TOUCH) $@

run-preprocessors-j9 : \
		$(OPENJ9_VM_BUILD_DIR)/omr/OMR_VERSION_STRING \
		$(OPENJ9_VM_BUILD_DIR)/compiler/jit.version \
		$(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h \
		$(OUTPUTDIR)/vm/cmake.stamp

else # OPENJ9_ENABLE_CMAKE

run-preprocessors-j9 : stage-j9 \
		$(OPENJ9_VM_BUILD_DIR)/omr/OMR_VERSION_STRING \
		$(OPENJ9_VM_BUILD_DIR)/compiler/jit.version \
		$(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h
	@$(ECHO) Running OpenJ9 preprocessors with OPENJ9_BUILDSPEC: $(OPENJ9_BUILDSPEC)
	export BOOT_JDK=$(BOOT_JDK) $(EXPORT_MSVS_ENV_VARS) \
		OPENJDK_VERSION_NUMBER_FOUR_POSITIONS=$(VERSION_NUMBER_FOUR_POSITIONS) \
		&& $(MAKE) -C $(OUTPUTDIR)/vm $(MAKEFLAGS) -f buildtools.mk \
			BUILD_ID=$(BUILD_ID) \
			EXTRA_CONFIGURE_ARGS=$(OMR_EXTRA_CONFIGURE_ARGS) \
			FREEMARKER_JAR="$(FREEMARKER_JAR)" \
			J9VM_SHA=$(OPENJ9_SHA) \
			JAVA_HOME=$(BOOT_JDK) \
			OMR_DIR=$(OUTPUTDIR)/vm/omr \
			OPENJ9_BUILD=true \
			SPEC=$(OPENJ9_BUILDSPEC) \
			UMA_OPTIONS_EXTRA="-buildDate $(shell date +'%Y%m%d')" \
			VERSION_MAJOR=$(VERSION_FEATURE) \
			tools

endif # OPENJ9_ENABLE_CMAKE

build-j9 : run-preprocessors-j9
	@$(ECHO) Compiling OpenJ9 in $(OUTPUTDIR)/vm
	export OPENJ9_BUILD=true $(EXPORT_NO_USE_MINGW) $(EXPORT_MSVS_ENV_VARS) $(CUSTOM_COMPILER_ENV_VARS) \
		&& $(MAKE) -C $(OUTPUTDIR)/vm $(MAKEFLAGS) all
	@$(ECHO) OpenJ9 compile complete

J9JCL_SOURCES_DONEFILE := $(MAKESUPPORT_OUTPUTDIR)/j9jcl_sources.done

recur_wildcard = $(foreach dir,$(wildcard $1/*),$(call recur_wildcard,$(dir),$2) $(filter $(subst *,%,$2),$(dir)))
AllJclSource   = $(call recur_wildcard,$(OPENJ9_TOPDIR)/jcl/src,*.java)

JPP_BASE_DIR := $(call FixPath,$(OPENJ9_TOPDIR))
JPP_DEST     := $(call FixPath,$(SUPPORT_OUTPUTDIR)/j9jcl_sources)
JPP_JAR      := $(call FixPath,$(OUTPUTDIR)/vm/sourcetools/lib/jpp.jar)

$(J9JCL_SOURCES_DONEFILE) : $(AllJclSource)
	@$(ECHO) Generating J9JCL sources
	@$(MKDIR) -p $(SUPPORT_OUTPUTDIR)/j9jcl_sources
	@$(BOOT_JDK)/bin/java \
		-cp "$(JPP_JAR)" \
		-Dfile.encoding=US-ASCII \
		com.ibm.jpp.commandline.CommandlineBuilder \
			-verdict \
			-baseDir "$(JPP_BASE_DIR)/" \
			-config JAVA11 \
			-srcRoot jcl/ \
			-xml jpp_configuration.xml \
			-dest "$(JPP_DEST)" \
			-macro:define "com.ibm.oti.vm.library.version=29" \
			-tag:define "PLATFORM-$(OPENJ9_PLATFORM_CODE)"
	@$(MKDIR) -p $(@D)
	@$(TOUCH) $@

generate-j9jcl-sources : $(J9JCL_SOURCES_DONEFILE)

clean-j9 : clean-openj9-thirdparty-binaries
	$(MAKE) -C $(OUTPUTDIR)/vm clean

clean-j9-dist : clean-openj9-thirdparty-binaries
	$(RM) -fdr $(OUTPUTDIR)/vm

clean-openj9-thirdparty-binaries :
	$(RM) -f $(OPENJ9_STAGED_THIRDPARTY_BINARIES) $(patsubst %.jar,%.tar.gz,$(OPENJ9_STAGED_THIRDPARTY_BINARIES))
